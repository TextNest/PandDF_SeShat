// ============================================
// 📄 2. src/app/(admin)/faq/page.tsx
// ============================================

'use client';

import { useState } from 'react';
import { Plus, Search, Sparkles } from 'lucide-react';
import Link from 'next/link';
import Button from '@/components/ui/Button/Button';
import FAQList from '@/components/faq/FAQList/FAQList';
import { FAQ } from '@/types/faq.types';
import styles from './faq-page.module.css';

const mockFAQs: FAQ[] = [
  {
    id: '1',
    question: '제품 사용법이 궁금해요',
    answer: '제품 사용 설명서의 3-5페이지를 참고하세요. 초기 설정은 전원을 켠 후 설정 버튼을 3초간 누르면 됩니다.',
    category: '사용법',
    tags: ['사용법', '초기설정'],
    productName: '세탁기 WM-2024',
    status: 'published',
    isAutoGenerated: false,
    viewCount: 234,
    helpfulCount: 189,
    createdAt: new Date('2025-01-10'),
    updatedAt: new Date('2025-01-10'),
    createdBy: '관리자',
  },
  {
    id: '2',
    question: '고장이 났어요',
    answer: '고장 증상에 따라 다음과 같이 조치하세요. 1) 전원이 안 들어오는 경우 2) 물이 안 나오는 경우 3) 소음이 발생하는 경우',
    category: '고장/수리',
    tags: ['고장', 'A/S'],
    productName: '세탁기 WM-2024',
    status: 'published',
    isAutoGenerated: true,
    viewCount: 187,
    helpfulCount: 156,
    createdAt: new Date('2025-01-15'),
    updatedAt: new Date('2025-01-15'),
    createdBy: 'AI',
  },
  {
    id: '3',
    question: 'A/S는 어떻게 받나요?',
    answer: 'A/S 신청은 고객센터(1588-1234) 또는 홈페이지를 통해 가능합니다. 보증기간은 제품 구매일로부터 1년입니다.',
    category: 'A/S',
    tags: ['A/S', '보증'],
    status: 'draft',
    isAutoGenerated: true,
    viewCount: 0,
    helpfulCount: 0,
    createdAt: new Date('2025-01-20'),
    updatedAt: new Date('2025-01-20'),
    createdBy: 'AI',
  },
];

export default function FAQPage() {
  const [searchQuery, setSearchQuery] = useState('');
  const [faqs] = useState<FAQ[]>(mockFAQs);
  const [statusFilter, setStatusFilter] = useState<'all' | 'published' | 'draft'>('all');

  const filteredFAQs = faqs.filter(faq => {
    const matchesSearch = 
      faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
      faq.answer.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = statusFilter === 'all' || faq.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  return (
    <div className={styles.page}>
      <div className={styles.header}>
        <div>
          <h1>FAQ 관리</h1>
          <p className={styles.subtitle}>자주 묻는 질문을 관리하세요</p>
        </div>
        <div className={styles.headerActions}>
          <Link href="/faq/auto-generate">
            <Button variant="secondary">
              <Sparkles size={20} />
              자동 생성
            </Button>
          </Link>
          <Button variant="primary">
            <Plus size={20} />
            FAQ 추가
          </Button>
        </div>
      </div>

      <div className={styles.toolbar}>
        <div className={styles.searchWrapper}>
          <Search className={styles.searchIcon} size={20} />
          <input
            type="text"
            placeholder="FAQ 검색..."
            className={styles.searchInput}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>

        <div className={styles.filters}>
          <button
            className={`${styles.filterButton} ${statusFilter === 'all' ? styles.active : ''}`}
            onClick={() => setStatusFilter('all')}
          >
            전체
          </button>
          <button
            className={`${styles.filterButton} ${statusFilter === 'published' ? styles.active : ''}`}
            onClick={() => setStatusFilter('published')}
          >
            게시됨
          </button>
          <button
            className={`${styles.filterButton} ${statusFilter === 'draft' ? styles.active : ''}`}
            onClick={() => setStatusFilter('draft')}
          >
            임시저장
          </button>
        </div>
      </div>

      <div className={styles.stats}>
        <div className={styles.statCard}>
          <span className={styles.statValue}>{faqs.filter(f => f.status === 'published').length}</span>
          <span className={styles.statLabel}>게시됨</span>
        </div>
        <div className={styles.statCard}>
          <span className={styles.statValue}>{faqs.filter(f => f.isAutoGenerated).length}</span>
          <span className={styles.statLabel}>AI 생성</span>
        </div>
        <div className={styles.statCard}>
          <span className={styles.statValue}>{faqs.reduce((sum, f) => sum + f.viewCount, 0)}</span>
          <span className={styles.statLabel}>총 조회수</span>
        </div>
      </div>

      <FAQList faqs={filteredFAQs} />
    </div>
  );
}